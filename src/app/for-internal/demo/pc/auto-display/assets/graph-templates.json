[
    {
        "name": "Default",
        "desc": "",
        "option": "{\r\n    grid:{\r\n        bottom: 30,\r\n        show: false\r\n    },\r\n    title: {\r\n        x: 'center',\r\n        textStyle: {},\r\n        subtextStyle: {}\r\n    },\r\n    tooltip: {\r\n        trigger: 'axis',\r\n        axisPointer: {\r\n            type: 'cross',\r\n            crossStyle: {\r\n                color: '#999'\r\n            }\r\n        },\r\n        extraCssText: 'z-index: 999',\r\n        position: function (point, params, dom, rect, size) {\r\n            const [isInLeft, isInTop] = [point[0] < size.viewSize[0] / 2, point[1] < size.viewSize[1] / 2];\r\n            let leftPos = isInLeft ? point[0] + 20 : point[0] - 20 - size.contentSize[0];\r\n            let topPos = isInTop ? point[1] + 20 : point[1] - 20 - size.contentSize[1];\r\n\r\n            leftPos = leftPos < 0 ? 0 : leftPos;\r\n            leftPos = leftPos + size.contentSize[0] > size.viewSize[0] ? size.viewSize[0] - size.contentSize[0] : leftPos;\r\n\r\n            topPos = topPos < 0 ? 0 : topPos;\r\n            topPos = topPos + size.contentSize[1] > size.viewSize[1] ? size.viewSize[1] - size.contentSize[1] : topPos;\r\n\r\n            return [leftPos, topPos];\r\n        },\r\n        showDelay: 0,\r\n        hideDelay: 0,\r\n        transitionDuration: 0\r\n    },\r\n    legend: {\r\n        data: null\r\n    },\r\n    xAxis: {\r\n        type: 'category',\r\n        axisPointer: {\r\n            type: 'shadow'\r\n        }\r\n    },\r\n    yAxis: [\r\n        {\r\n            type: 'value',\r\n       splitLine: {\r\n              show: false\r\n          },         axisLabel: {\r\n                formatter: '{value}'\r\n            }\r\n        },\r\n        {\r\n            type: 'value',\r\n            axisLabel: {\r\n                formatter: '{value}'\r\n            }\r\n        }\r\n    ]\r\n}",
        "seriesItem": "{\r\n    type: 'bar',\r\n    data: null\r\n}",
        "type": "rectangular"
    },
    {
        "name": "Dashboard",
        "desc": "",
        "option": "{\r\n    color: [\r\n        {\r\n            type: 'linear',\r\n            x: 0,\r\n            y: 0,\r\n            x2: 1,\r\n            y2: 1,\r\n            colorStops: [{\r\n                offset: 0, color: '#3B69FF'\r\n            }, {\r\n                offset: 1, color: '#5096EE'\r\n            }],\r\n            global: false\r\n        },\r\n        {\r\n            type: 'linear',\r\n            x: 0,\r\n            y: 0,\r\n            x2: 1,\r\n            y2: 1,\r\n            colorStops: [{\r\n                offset: 0, color: '#EF6F61' \r\n            }, {\r\n                offset: 1, color: '#FF9C6D'\r\n            }],\r\n            global: false\r\n        },\r\n        {\r\n            type: 'linear',\r\n            x: 0,\r\n            y: 0,\r\n            x2: 1,\r\n            y2: 1,\r\n            colorStops: [{\r\n                offset: 0, color: '#71C032' \r\n            }, {\r\n                offset: 1, color: '#51E5A5'\r\n            }],\r\n            global: false\r\n        },\r\n        {\r\n            type: 'linear',\r\n            x: 0,\r\n            y: 0,\r\n            x2: 1,\r\n            y2: 1,\r\n            colorStops: [{\r\n                offset: 0, color: '#FAAA55' \r\n            }, {\r\n                offset: 1, color: '#FCD549'\r\n            }],\r\n            global: false\r\n        },\r\n        {\r\n            type: 'linear',\r\n            x: 0,\r\n            y: 0,\r\n            x2: 1,\r\n            y2: 1,\r\n            colorStops: [{\r\n                offset: 0, color: '#D142D9' \r\n            }, {\r\n                offset: 1, color: '#F82979'\r\n            }],\r\n            global: false\r\n        },\r\n        {\r\n            type: 'linear',\r\n            x: 0,\r\n            y: 0,\r\n            x2: 1,\r\n            y2: 1,\r\n            colorStops: [{\r\n                offset: 0, color: '#26BFA5' \r\n            }, {\r\n                offset: 1, color: '#31B7E8'\r\n            }],\r\n            global: false\r\n        },\r\n        {\r\n            type: 'linear',\r\n            x: 0,\r\n            y: 0,\r\n            x2: 1,\r\n            y2: 1,\r\n            colorStops: [{\r\n                offset: 0, color: '#816AFF' \r\n            }, {\r\n                offset: 1, color: '#BA56E0'\r\n            }],\r\n            global: false\r\n        }\r\n\r\n    ],\r\n    grid:{\r\n        bottom: 30,\r\n        show: false\r\n    },\r\n    title: {\r\n        x: 'center',\r\n        textStyle: {},\r\n        subtextStyle: {}\r\n    },\r\n    tooltip: {\r\n        trigger: 'axis',\r\n        axisPointer: {\r\n            type: 'cross',\r\n            crossStyle: {\r\n                color: '#999'\r\n            }\r\n        },\r\n        extraCssText: 'z-index: 999',\r\n        position: function (point, params, dom, rect, size) {\r\n            const [isInLeft, isInTop] = [point[0] < size.viewSize[0] / 2, point[1] < size.viewSize[1] / 2];\r\n            let leftPos = isInLeft ? point[0] + 20 : point[0] - 20 - size.contentSize[0];\r\n            let topPos = isInTop ? point[1] + 20 : point[1] - 20 - size.contentSize[1];\r\n\r\n            leftPos = leftPos < 0 ? 0 : leftPos;\r\n            leftPos = leftPos + size.contentSize[0] > size.viewSize[0] ? size.viewSize[0] - size.contentSize[0] : leftPos;\r\n\r\n            topPos = topPos < 0 ? 0 : topPos;\r\n            topPos = topPos + size.contentSize[1] > size.viewSize[1] ? size.viewSize[1] - size.contentSize[1] : topPos;\r\n\r\n            return [leftPos, topPos];\r\n        },\r\n        showDelay: 0,\r\n        hideDelay: 0,\r\n        transitionDuration: 0\r\n    },\r\n    legend: {\r\n        data: null\r\n    },\r\n    xAxis: {\r\n        type: 'category',\r\n        axisPointer: {\r\n            type: 'shadow'\r\n        }\r\n    },\r\n    yAxis: [\r\n        {\r\n            type: 'value',\r\n       splitLine: {\r\n              show: false\r\n          },         axisLabel: {\r\n                formatter: '{value}'\r\n            }\r\n        },\r\n        {\r\n            type: 'value',\r\n            axisLabel: {\r\n                formatter: '{value}'\r\n            }\r\n        }\r\n    ]\r\n}",
        "seriesItem": "",
        "type": "rectangular"
    },
    {
        "name": "Default",
        "desc": "",
        "option": "{\r\n    tooltip: {\r\n        trigger: 'item',\r\n        formatter: '{a} <br/>{b} : {c} ({d}%)',\r\n        textStyle: {\r\n            fontSize: 12\r\n            },\r\n        padding: [1, 6],\r\n        showDelay: 0,\r\n        hideDelay: 0,\r\n        transitionDuration: 0,\r\n        position: function (point, params, dom, rect, size) {\r\n            const [isInLeft, isInTop] = [point[0] < size.viewSize[0] / 2, point[1] < size.viewSize[1] / 2];\r\n            let leftPos = isInLeft ? point[0] + 20 : point[0] - 20 - size.contentSize[0];\r\n            let topPos = isInTop ? point[1] + 20 : point[1] - 20 - size.contentSize[1];\r\n\r\n            leftPos = leftPos < 0 ? 0 : leftPos;\r\n            leftPos = leftPos + size.contentSize[0] > size.viewSize[0] ? size.viewSize[0] - size.contentSize[0] : leftPos;\r\n\r\n            topPos = topPos < 0 ? 0 : topPos;\r\n            topPos = topPos + size.contentSize[1] > size.viewSize[1] ? size.viewSize[1] - size.contentSize[1] : topPos;\r\n\r\n            return [leftPos, topPos];\r\n        }\r\n    },\r\n}",
        "seriesItem": "{\r\n    type: 'pie', data: null, name: '', radius: ['0%', '80%'],\r\n    center: ['50%', '50%'],\r\n    itemStyle: {\r\n        emphasis: {\r\n            shadowBlur: 10,\r\n            shadowOffsetX: 0,\r\n            shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n        }\r\n    }\r\n}",
        "type": "pie"
    },
    {
        "name": "Dashboard",
        "desc": "",
        "option": "{\r\n    color: [\r\n        {\r\n            type: 'linear',\r\n            x: 0,\r\n            y: 0,\r\n            x2: 1,\r\n            y2: 1,\r\n            colorStops: [{\r\n                offset: 0, color: '#3B69FF'\r\n            }, {\r\n                offset: 1, color: '#5096EE'\r\n            }],\r\n            global: false\r\n        },\r\n        {\r\n            type: 'linear',\r\n            x: 0,\r\n            y: 0,\r\n            x2: 1,\r\n            y2: 1,\r\n            colorStops: [{\r\n                offset: 0, color: '#EF6F61' \r\n            }, {\r\n                offset: 1, color: '#FF9C6D'\r\n            }],\r\n            global: false\r\n        },\r\n        {\r\n            type: 'linear',\r\n            x: 0,\r\n            y: 0,\r\n            x2: 1,\r\n            y2: 1,\r\n            colorStops: [{\r\n                offset: 0, color: '#71C032' \r\n            }, {\r\n                offset: 1, color: '#51E5A5'\r\n            }],\r\n            global: false\r\n        },\r\n        {\r\n            type: 'linear',\r\n            x: 0,\r\n            y: 0,\r\n            x2: 1,\r\n            y2: 1,\r\n            colorStops: [{\r\n                offset: 0, color: '#FAAA55' \r\n            }, {\r\n                offset: 1, color: '#FCD549'\r\n            }],\r\n            global: false\r\n        },\r\n        {\r\n            type: 'linear',\r\n            x: 0,\r\n            y: 0,\r\n            x2: 1,\r\n            y2: 1,\r\n            colorStops: [{\r\n                offset: 0, color: '#D142D9' \r\n            }, {\r\n                offset: 1, color: '#F82979'\r\n            }],\r\n            global: false\r\n        },\r\n        {\r\n            type: 'linear',\r\n            x: 0,\r\n            y: 0,\r\n            x2: 1,\r\n            y2: 1,\r\n            colorStops: [{\r\n                offset: 0, color: '#26BFA5' \r\n            }, {\r\n                offset: 1, color: '#31B7E8'\r\n            }],\r\n            global: false\r\n        },\r\n        {\r\n            type: 'linear',\r\n            x: 0,\r\n            y: 0,\r\n            x2: 1,\r\n            y2: 1,\r\n            colorStops: [{\r\n                offset: 0, color: '#816AFF' \r\n            }, {\r\n                offset: 1, color: '#BA56E0'\r\n            }],\r\n            global: false\r\n        }\r\n\r\n    ],\r\n    tooltip: {\r\n        trigger: 'item',\r\n        formatter: '{a} <br/>{b} : {c} ({d}%)',\r\n        textStyle: {\r\n            fontSize: 12\r\n        },\r\n        padding: [1, 6],\r\n        showDelay: 0,\r\n        hideDelay: 0,\r\n        transitionDuration: 0,\r\n        position: function (point, params, dom, rect, size) {\r\n            const [isInLeft, isInTop] = [point[0] < size.viewSize[0] / 2, point[1] < size.viewSize[1] / 2];\r\n            let leftPos = isInLeft ? point[0] + 20 : point[0] - 20 - size.contentSize[0];\r\n            let topPos = isInTop ? point[1] + 20 : point[1] - 20 - size.contentSize[1];\r\n\r\n            leftPos = leftPos < 0 ? 0 : leftPos;\r\n            leftPos = leftPos + size.contentSize[0] > size.viewSize[0] ? size.viewSize[0] - size.contentSize[0] : leftPos;\r\n\r\n            topPos = topPos < 0 ? 0 : topPos;\r\n            topPos = topPos + size.contentSize[1] > size.viewSize[1] ? size.viewSize[1] - size.contentSize[1] : topPos;\r\n\r\n            return [leftPos, topPos];\r\n        }\r\n    },\r\n}",
        "seriesItem": "",
        "type": "pie"
    },
    {
        "name": "Default",
        "desc": "",
        "option": "{\n    legend: {\n        show: true,\n        type: 'scroll',\n        orient: 'vertical',\n        left: 'left'\n    },\n    title: {\n        show: true,\n        text: '漏斗图'\n    },\n    tooltip: {\n        trigger: 'item',\n        formatter: '{a} <br/>{b} : {c}%'\n    }\n}",
        "seriesItem": "{name: '漏斗图', type: 'funnel', left: '10%', top: 60, bottom: 60, width: '80%', min: 0, max: 100, minSize: '0%', maxSize: '100%', sort: 'descending', gap: 2, label: {show: true, position: 'inside'}, labelLine: {length: 10, lineStyle: {width: 1, type: 'solid'}}, itemStyle: {borderColor: '#fff', borderWidth: 1}, emphasis: {label: {fontSize: 20}}}",
        "type": "funnel"
    },
    {
        "name": "Dashboard",
        "desc": "",
        "option": "{\n        color: ['#3C55EB', '#2D40BA', '#223298', '#1B277C', '#131C63', '#3C55EB', '#2D40BA', '#223298', '#1B277C', '#131C63'],\n        legend: {\n            show: true,\n            type: 'scroll',\n            orient: 'vertical',\n            left: 'left'\n        },\n        title: {\n            show: true,\n            text: '漏斗图'\n        },\n        tooltip: {\n            trigger: 'item',\n            formatter: '{a} <br/>{b} : {c}%'\n        }\n    }",
        "seriesItem": "",
        "type": "funnel"
    },
    {
        "name": "Default",
        "desc": "",
        "option": "{\r\n    tooltip: {\r\n        formatter: \"{a} <br/>{b} : {c}%\",\r\n        extraCssText: 'z-index: 999',\r\n        position: function (point, params, dom, rect, size) {\r\n            const [isInLeft, isInTop] = [point[0] < size.viewSize[0] / 2, point[1] < size.viewSize[1] / 2];\r\n            let leftPos = isInLeft ? point[0] + 20 : point[0] - 20 - size.contentSize[0];\r\n            let topPos = isInTop ? point[1] + 20 : point[1] - 20 - size.contentSize[1];\r\n\r\n            leftPos = leftPos < 0 ? 0 : leftPos;\r\n            leftPos = leftPos + size.contentSize[0] > size.viewSize[0] ? size.viewSize[0] - size.contentSize[0] : leftPos;\r\n\r\n            topPos = topPos < 0 ? 0 : topPos;\r\n            topPos = topPos + size.contentSize[1] > size.viewSize[1] ? size.viewSize[1] - size.contentSize[1] : topPos;\r\n\r\n            return [leftPos, topPos];\r\n        },\r\n        showDelay: 0,\r\n        hideDelay: 0,\r\n        transitionDuration: 0\r\n    },\r\n    toolbox: {\r\n        show: false,\r\n        feature: {\r\n            restore: {show: true},\r\n            saveAsImage: {show: true}\r\n        }\r\n    },\r\n    legend: {\r\n        show: false\r\n    }\r\n}",
        "seriesItem": "{\r\n    name: '',\r\n    type: 'gauge',\r\n    center: ['50%', '50%'],\r\n    radius: '75%',\r\n    startAngle: 225,\r\n    endAngle: -45,\r\n    data: null,\r\n    splitNumber: 11,\r\n\taxisTick: {\r\n        length: 6,\r\n        lineStyle: {\r\n            color: 'auto'\r\n        }\r\n    },\r\n    splitLine: {\r\n        length: 10,\r\n            lineStyle: {\r\n            color: 'auto'\r\n        }\r\n    },\r\n    axisLine: {\r\n        lineStyle: {\r\n            width: 3,\r\n        }\r\n    },\r\n    axisLabel: {\r\n        fontWeight: 'bolder',\r\n        fontSize: 10,\r\n        formatter: function(v){\r\n            return v.toFixed(0);\r\n        }\r\n    },\r\n    title: {\r\n        color: '#63869e',\r\n        offsetCenter: [0, '100%'],\r\n        fontSize: 12\r\n    },\r\n    detail: {\r\n        textStyle: {\r\n            fontSize: 12,\r\n        },\r\n        offsetCenter: [0, '50%']\r\n    },\r\n    pointer: {\r\n        width: 6,\r\n        length: '60%'\r\n    }\r\n}",
        "type": "gauge"
    },
    {
        "name": "Dashboard",
        "desc": "",
        "option": "{\r\n    tooltip: {\r\n        formatter: \"{a} <br/>{b} : {c}%\",\r\n        extraCssText: 'z-index: 999',\r\n        position: function (point, params, dom, rect, size) {\r\n            const [isInLeft, isInTop] = [point[0] < size.viewSize[0] / 2, point[1] < size.viewSize[1] / 2];\r\n            let leftPos = isInLeft ? point[0] + 20 : point[0] - 20 - size.contentSize[0];\r\n            let topPos = isInTop ? point[1] + 20 : point[1] - 20 - size.contentSize[1];\r\n\r\n            leftPos = leftPos < 0 ? 0 : leftPos;\r\n            leftPos = leftPos + size.contentSize[0] > size.viewSize[0] ? size.viewSize[0] - size.contentSize[0] : leftPos;\r\n\r\n            topPos = topPos < 0 ? 0 : topPos;\r\n            topPos = topPos + size.contentSize[1] > size.viewSize[1] ? size.viewSize[1] - size.contentSize[1] : topPos;\r\n\r\n            return [leftPos, topPos];\r\n        },\r\n        showDelay: 0,\r\n        hideDelay: 0,\r\n        transitionDuration: 0\r\n    },\r\n    toolbox: {\r\n        show: false,\r\n        feature: {\r\n            restore: {show: true},\r\n            saveAsImage: {show: true}\r\n        }\r\n    },\r\n    legend: {\r\n        show: false\r\n    }\r\n}",
        "seriesItem": "{\r\n    name: '',\r\n    type: 'gauge',\r\n    center: ['50%', '50%'],\r\n    radius: '75%',\r\n    startAngle: 225,\r\n    endAngle: -45,\r\n    data: null,\r\n    splitNumber: 11,\r\n    axisTick: {\r\n        length: 6,\r\n        lineStyle: {\r\n            color: 'auto'\r\n        }\r\n    },\r\n    splitLine: {\r\n        length: 10,\r\n            lineStyle: {\r\n            color: 'auto'\r\n        }\r\n    },\r\n    axisLine: {\r\n        lineStyle: {\r\n            color: [[0.09, '#71C032'], [0.82, '#3B69FF'], [1, '#EF6F61']],\r\n            width: 3,\r\n            shadowColor: '#fff',\r\n            shadowBlur: 10\r\n        }\r\n    },\r\n    axisLabel: {\r\n        fontWeight: 'bolder',\r\n        shadowColor: '#fff',\r\n        shadowBlur: 10,\r\n        fontSize: 10,\r\n        formatter: function(v){\r\n            return v.toFixed(0);\r\n        }\r\n    },\r\n    title: {\r\n        color: '#3B69FF',\r\n        offsetCenter: [0, '100%'],\r\n        fontSize: 12\r\n    },\r\n    detail: {\r\n        textStyle: {\r\n            fontSize: 12,\r\n        },\r\n        offsetCenter: [0, '50%']\r\n    },\r\n    pointer: {\r\n        width: 6,\r\n        length: '60%'\r\n    }\r\n}",
        "type": "gauge"
    },
    {
        "name": "Default",
        "desc": "",
        "option": "{\r\n    tooltip: {\r\n        textStyle: {\r\n            fontSize: 12\r\n            },\r\n        padding: [1, 6],\r\n        showDelay: 0,\r\n        hideDelay: 0,\r\n        transitionDuration: 0,\r\n        position: function (point, params, dom, rect, size) {\r\n            const [isInLeft, isInTop] = [point[0] < size.viewSize[0] / 2, point[1] < size.viewSize[1] / 2];\r\n            let leftPos = isInLeft ? point[0] + 20 : point[0] - 20 - size.contentSize[0];\r\n            let topPos = isInTop ? point[1] + 20 : point[1] - 20 - size.contentSize[1];\r\n\r\n            leftPos = leftPos < 0 ? 0 : leftPos;\r\n            leftPos = leftPos + size.contentSize[0] > size.viewSize[0] ? size.viewSize[0] - size.contentSize[0] : leftPos;\r\n\r\n            topPos = topPos < 0 ? 0 : topPos;\r\n            topPos = topPos + size.contentSize[1] > size.viewSize[1] ? size.viewSize[1] - size.contentSize[1] : topPos;\r\n\r\n            return [leftPos, topPos];\r\n        },\r\n        showDelay: 0,\r\n        hideDelay: 0,\r\n        transitionDuration: 0\r\n    },\r\n}",
        "seriesItem": "",
        "type": "radar"
    },
    {
        "name": "Dashboard",
        "desc": "",
        "option": "{\r\n    color: [\r\n        {\r\n            type: 'linear',\r\n            x: 0,\r\n            y: 0,\r\n            x2: 1,\r\n            y2: 1,\r\n            colorStops: [{\r\n                offset: 0, color: '#3B69FF'\r\n            }, {\r\n                offset: 1, color: '#5096EE'\r\n            }],\r\n            global: false\r\n        },\r\n        {\r\n            type: 'linear',\r\n            x: 0,\r\n            y: 0,\r\n            x2: 1,\r\n            y2: 1,\r\n            colorStops: [{\r\n                offset: 0, color: '#EF6F61' \r\n            }, {\r\n                offset: 1, color: '#FF9C6D'\r\n            }],\r\n            global: false\r\n        },\r\n        {\r\n            type: 'linear',\r\n            x: 0,\r\n            y: 0,\r\n            x2: 1,\r\n            y2: 1,\r\n            colorStops: [{\r\n                offset: 0, color: '#71C032' \r\n            }, {\r\n                offset: 1, color: '#51E5A5'\r\n            }],\r\n            global: false\r\n        },\r\n        {\r\n            type: 'linear',\r\n            x: 0,\r\n            y: 0,\r\n            x2: 1,\r\n            y2: 1,\r\n            colorStops: [{\r\n                offset: 0, color: '#FAAA55' \r\n            }, {\r\n                offset: 1, color: '#FCD549'\r\n            }],\r\n            global: false\r\n        },\r\n        {\r\n            type: 'linear',\r\n            x: 0,\r\n            y: 0,\r\n            x2: 1,\r\n            y2: 1,\r\n            colorStops: [{\r\n                offset: 0, color: '#D142D9' \r\n            }, {\r\n                offset: 1, color: '#F82979'\r\n            }],\r\n            global: false\r\n        },\r\n        {\r\n            type: 'linear',\r\n            x: 0,\r\n            y: 0,\r\n            x2: 1,\r\n            y2: 1,\r\n            colorStops: [{\r\n                offset: 0, color: '#26BFA5' \r\n            }, {\r\n                offset: 1, color: '#31B7E8'\r\n            }],\r\n            global: false\r\n        },\r\n        {\r\n            type: 'linear',\r\n            x: 0,\r\n            y: 0,\r\n            x2: 1,\r\n            y2: 1,\r\n            colorStops: [{\r\n                offset: 0, color: '#816AFF' \r\n            }, {\r\n                offset: 1, color: '#BA56E0'\r\n            }],\r\n            global: false\r\n        }\r\n\r\n    ],\r\n    tooltip: {\r\n        textStyle: {\r\n            fontSize: 12\r\n        },\r\n        padding: [1, 6],\r\n        showDelay: 0,\r\n        hideDelay: 0,\r\n        transitionDuration: 0,\r\n        position: function (point, params, dom, rect, size) {\r\n            const [isInLeft, isInTop] = [point[0] < size.viewSize[0] / 2, point[1] < size.viewSize[1] / 2];\r\n            let leftPos = isInLeft ? point[0] + 20 : point[0] - 20 - size.contentSize[0];\r\n            let topPos = isInTop ? point[1] + 20 : point[1] - 20 - size.contentSize[1];\r\n\r\n            leftPos = leftPos < 0 ? 0 : leftPos;\r\n            leftPos = leftPos + size.contentSize[0] > size.viewSize[0] ? size.viewSize[0] - size.contentSize[0] : leftPos;\r\n\r\n            topPos = topPos < 0 ? 0 : topPos;\r\n            topPos = topPos + size.contentSize[1] > size.viewSize[1] ? size.viewSize[1] - size.contentSize[1] : topPos;\r\n\r\n            return [leftPos, topPos];\r\n        },\r\n        showDelay: 0,\r\n        hideDelay: 0,\r\n        transitionDuration: 0\r\n    },\r\n}",
        "seriesItem": "",
        "type": "radar"
    },
    {
        "name": "Default",
        "desc": "",
        "option": "{\r\n    grid:{\r\n        bottom: 30,\r\n        show: false\r\n    },\r\n    title: {\r\n        x: 'center',\r\n        textStyle: {},\r\n        subtextStyle: {}\r\n    },\r\n    tooltip: {\r\n        trigger: 'axis',\r\n        axisPointer: {\r\n            type: 'cross',\r\n            crossStyle: {\r\n                color: '#999'\r\n            }\r\n        },\r\n        extraCssText: 'z-index: 999',\r\n        position: function (point, params, dom, rect, size) {\r\n            const [isInLeft, isInTop] = [point[0] < size.viewSize[0] / 2, point[1] < size.viewSize[1] / 2];\r\n            let leftPos = isInLeft ? point[0] + 20 : point[0] - 20 - size.contentSize[0];\r\n            let topPos = isInTop ? point[1] + 20 : point[1] - 20 - size.contentSize[1];\r\n\r\n            leftPos = leftPos < 0 ? 0 : leftPos;\r\n            leftPos = leftPos + size.contentSize[0] > size.viewSize[0] ? size.viewSize[0] - size.contentSize[0] : leftPos;\r\n\r\n            topPos = topPos < 0 ? 0 : topPos;\r\n            topPos = topPos + size.contentSize[1] > size.viewSize[1] ? size.viewSize[1] - size.contentSize[1] : topPos;\r\n\r\n            return [leftPos, topPos];\r\n        },\r\n        showDelay: 0,\r\n        hideDelay: 0,\r\n        transitionDuration: 0\r\n    },\r\n    legend: {\r\n        data: null\r\n    }\r\n}",
        "seriesItem": "{\r\n    symbolSize: 10\r\n}",
        "type": "scatter"
    },
    {
        "name": "Dashboard",
        "desc": "",
        "option": "{\r\n    grid:{\r\n        bottom: 30,\r\n        show: false\r\n    },\r\n    color: [\r\n        {\r\n            type: 'linear',\r\n            x: 0,\r\n            y: 0,\r\n            x2: 1,\r\n            y2: 1,\r\n            colorStops: [{\r\n                offset: 0, color: '#3B69FF'\r\n            }, {\r\n                offset: 1, color: '#5096EE'\r\n            }],\r\n            global: false\r\n        },\r\n        {\r\n            type: 'linear',\r\n            x: 0,\r\n            y: 0,\r\n            x2: 1,\r\n            y2: 1,\r\n            colorStops: [{\r\n                offset: 0, color: '#EF6F61' \r\n            }, {\r\n                offset: 1, color: '#FF9C6D'\r\n            }],\r\n            global: false\r\n        },\r\n        {\r\n            type: 'linear',\r\n            x: 0,\r\n            y: 0,\r\n            x2: 1,\r\n            y2: 1,\r\n            colorStops: [{\r\n                offset: 0, color: '#71C032' \r\n            }, {\r\n                offset: 1, color: '#51E5A5'\r\n            }],\r\n            global: false\r\n        },\r\n        {\r\n            type: 'linear',\r\n            x: 0,\r\n            y: 0,\r\n            x2: 1,\r\n            y2: 1,\r\n            colorStops: [{\r\n                offset: 0, color: '#FAAA55' \r\n            }, {\r\n                offset: 1, color: '#FCD549'\r\n            }],\r\n            global: false\r\n        },\r\n        {\r\n            type: 'linear',\r\n            x: 0,\r\n            y: 0,\r\n            x2: 1,\r\n            y2: 1,\r\n            colorStops: [{\r\n                offset: 0, color: '#D142D9' \r\n            }, {\r\n                offset: 1, color: '#F82979'\r\n            }],\r\n            global: false\r\n        },\r\n        {\r\n            type: 'linear',\r\n            x: 0,\r\n            y: 0,\r\n            x2: 1,\r\n            y2: 1,\r\n            colorStops: [{\r\n                offset: 0, color: '#26BFA5' \r\n            }, {\r\n                offset: 1, color: '#31B7E8'\r\n            }],\r\n            global: false\r\n        },\r\n        {\r\n            type: 'linear',\r\n            x: 0,\r\n            y: 0,\r\n            x2: 1,\r\n            y2: 1,\r\n            colorStops: [{\r\n                offset: 0, color: '#816AFF' \r\n            }, {\r\n                offset: 1, color: '#BA56E0'\r\n            }],\r\n            global: false\r\n        }\r\n\r\n    ],\r\n    title: {\r\n        x: 'center',\r\n        textStyle: {},\r\n        subtextStyle: {}\r\n    },\r\n    tooltip: {\r\n        trigger: 'axis',\r\n        axisPointer: {\r\n            type: 'cross',\r\n            crossStyle: {\r\n                color: '#999'\r\n            }\r\n        },\r\n        extraCssText: 'z-index: 999',\r\n        position: function (point, params, dom, rect, size) {\r\n            const [isInLeft, isInTop] = [point[0] < size.viewSize[0] / 2, point[1] < size.viewSize[1] / 2];\r\n            let leftPos = isInLeft ? point[0] + 20 : point[0] - 20 - size.contentSize[0];\r\n            let topPos = isInTop ? point[1] + 20 : point[1] - 20 - size.contentSize[1];\r\n\r\n            leftPos = leftPos < 0 ? 0 : leftPos;\r\n            leftPos = leftPos + size.contentSize[0] > size.viewSize[0] ? size.viewSize[0] - size.contentSize[0] : leftPos;\r\n\r\n            topPos = topPos < 0 ? 0 : topPos;\r\n            topPos = topPos + size.contentSize[1] > size.viewSize[1] ? size.viewSize[1] - size.contentSize[1] : topPos;\r\n\r\n            return [leftPos, topPos];\r\n        },\r\n        showDelay: 0,\r\n        hideDelay: 0,\r\n        transitionDuration: 0\r\n    },\r\n    legend: {\r\n        data: null\r\n    }\r\n}",
        "seriesItem": "{\r\n    symbolSize: 10\r\n}",
        "type": "scatter"
    },
    {
        "name": "Default",
        "desc": "",
        "option": "{\r\n    title: {\r\n        x: 'center',\r\n        textStyle: {},\r\n        subtextStyle: {}\r\n    },\r\n    tooltip: {\r\n        trigger: 'item',\r\n        formatter: \"\",\r\n        extraCssText: 'z-index: 999',\r\n        position: function (point, params, dom, rect, size) {\r\n            const [isInLeft, isInTop] = [point[0] < size.viewSize[0] / 2, point[1] < size.viewSize[1] / 2];\r\n            let leftPos = isInLeft ? point[0] + 20 : point[0] - 20 - size.contentSize[0];\r\n            let topPos = isInTop ? point[1] + 20 : point[1] - 20 - size.contentSize[1];\r\n\r\n            leftPos = leftPos < 0 ? 0 : leftPos;\r\n            leftPos = leftPos + size.contentSize[0] > size.viewSize[0] ? size.viewSize[0] - size.contentSize[0] : leftPos;\r\n\r\n            topPos = topPos < 0 ? 0 : topPos;\r\n            topPos = topPos + size.contentSize[1] > size.viewSize[1] ? size.viewSize[1] - size.contentSize[1] : topPos;\r\n\r\n            return [leftPos, topPos];\r\n        },\r\n        showDelay: 0,\r\n        hideDelay: 0,\r\n        transitionDuration: 0\r\n    },\r\n    legend: {\r\n        show:false\r\n    },\r\n    visualMap: {\r\n        type: 'piecewise',\r\n        pieces: [\r\n            {gt: 40000, color: 'yellow',label: '> 40k'},\r\n            {gt: 30000, lte: 40000, color: 'green',label: '30k - 40k'},\r\n            {gt: 20000, lte: 30000, color: 'blue',label: '20k - 30k'},\r\n            {gte: 10000, lte: 20000, color: 'red',label: '10k - 20k'}\r\n        ]\r\n    }\r\n}\r\n",
        "seriesItem": "{       \r\n    type: 'map',\r\n    data: null,\r\n    mapType: '', \r\n    showLegendSymbol: false,     \r\n    nameMap: {\r\n        \"南京市\": \"Nanjing\",\r\n        \"无锡市\": \"Wuxi\",\r\n        \"徐州市\": \"Xuzhou\",\r\n        \"常州市\": \"Changzhou\",\r\n        \"苏州市\": \"Suzhou\",\r\n        \"南通市\": \"Nantong\",\r\n        \"连云港市\": \"Lianyungang\",\r\n        \"淮安市\": \"Huaian\",\r\n        \"盐城市\": \"Yancheng\",\r\n        \"扬州市\": \"Yangzhou\",\r\n        \"镇江市\": \"Zhenjiang\",\r\n        \"泰州市\": \"Taizhou\",\r\n        \"宿迁市\": \"Suqian\",\r\n    }\r\n}\r\n",
        "type": "map"
    },
    {
        "name": "Dashboard",
        "desc": "",
        "option": "{\r\n    title: {\r\n        x: 'center',\r\n        textStyle: {},\r\n        subtextStyle: {}\r\n    },\r\n    tooltip: {\r\n        trigger: 'item',\r\n        formatter: \"\",\r\n        extraCssText: 'z-index: 999',\r\n        position: function (point, params, dom, rect, size) {\r\n            const [isInLeft, isInTop] = [point[0] < size.viewSize[0] / 2, point[1] < size.viewSize[1] / 2];\r\n            let leftPos = isInLeft ? point[0] + 20 : point[0] - 20 - size.contentSize[0];\r\n            let topPos = isInTop ? point[1] + 20 : point[1] - 20 - size.contentSize[1];\r\n\r\n            leftPos = leftPos < 0 ? 0 : leftPos;\r\n            leftPos = leftPos + size.contentSize[0] > size.viewSize[0] ? size.viewSize[0] - size.contentSize[0] : leftPos;\r\n\r\n            topPos = topPos < 0 ? 0 : topPos;\r\n            topPos = topPos + size.contentSize[1] > size.viewSize[1] ? size.viewSize[1] - size.contentSize[1] : topPos;\r\n\r\n            return [leftPos, topPos];\r\n        },\r\n        showDelay: 0,\r\n        hideDelay: 0,\r\n        transitionDuration: 0\r\n    },\r\n    legend: {\r\n        show: false\r\n    },\r\n    visualMap: {\r\n        type: 'piecewise',\r\n        pieces: [\r\n            {\r\n                gt: 40000, color: {\r\n                    type: 'linear',\r\n                    x: 0,\r\n                    y: 0,\r\n                    x2: 1,\r\n                    y2: 1,\r\n                    colorStops: [{\r\n                        offset: 0, color: '#3B69FF'\r\n                    }, {\r\n                        offset: 1, color: '#5096EE'\r\n                    }],\r\n                    global: false\r\n                }, label: '> 40k'\r\n            },\r\n            {\r\n                gt: 30000, lte: 40000, color: {\r\n                    type: 'linear',\r\n                    x: 0,\r\n                    y: 0,\r\n                    x2: 1,\r\n                    y2: 1,\r\n                    colorStops: [{\r\n                        offset: 0, color: '#EF6F61'\r\n                    }, {\r\n                        offset: 1, color: '#FF9C6D'\r\n                    }],\r\n                    global: false\r\n                }, label: '30k - 40k'\r\n            },\r\n            {\r\n                gt: 20000, lte: 30000, color: {\r\n                    type: 'linear',\r\n                    x: 0,\r\n                    y: 0,\r\n                    x2: 1,\r\n                    y2: 1,\r\n                    colorStops: [{\r\n                        offset: 0, color: '#71C032'\r\n                    }, {\r\n                        offset: 1, color: '#51E5A5'\r\n                    }],\r\n                    global: false\r\n                }, label: '20k - 30k'\r\n            },\r\n            {\r\n                gte: 10000, lte: 20000, color: {\r\n                    type: 'linear',\r\n                    x: 0,\r\n                    y: 0,\r\n                    x2: 1,\r\n                    y2: 1,\r\n                    colorStops: [{\r\n                        offset: 0, color: '#FAAA55'\r\n                    }, {\r\n                        offset: 1, color: '#FCD549'\r\n                    }],\r\n                    global: false\r\n                }, label: '10k - 20k'\r\n            }\r\n        ]\r\n    }\r\n}",
        "seriesItem": "{       \r\n    type: 'map',\r\n    data: null,\r\n    mapType: '', \r\n    showLegendSymbol: false,     \r\n    nameMap: {\r\n        \"南京市\": \"Nanjing\",\r\n        \"无锡市\": \"Wuxi\",\r\n        \"徐州市\": \"Xuzhou\",\r\n        \"常州市\": \"Changzhou\",\r\n        \"苏州市\": \"Suzhou\",\r\n        \"南通市\": \"Nantong\",\r\n        \"连云港市\": \"Lianyungang\",\r\n        \"淮安市\": \"Huaian\",\r\n        \"盐城市\": \"Yancheng\",\r\n        \"扬州市\": \"Yangzhou\",\r\n        \"镇江市\": \"Zhenjiang\",\r\n        \"泰州市\": \"Taizhou\",\r\n        \"宿迁市\": \"Suqian\",\r\n    }\r\n}",
        "type": "map"
    },
    {
        "name": "Dashboard",
        "desc": "",
        "option": "{\r\n    color: [\r\n        {\r\n            type: 'linear',\r\n            x: 0,\r\n            y: 0,\r\n            x2: 1,\r\n            y2: 1,\r\n            colorStops: [{\r\n                offset: 0, color: '#3B69FF'\r\n            }, {\r\n                offset: 1, color: '#5096EE'\r\n            }],\r\n            global: false\r\n        },\r\n        {\r\n            type: 'linear',\r\n            x: 0,\r\n            y: 0,\r\n            x2: 1,\r\n            y2: 1,\r\n            colorStops: [{\r\n                offset: 0, color: '#EF6F61' \r\n            }, {\r\n                offset: 1, color: '#FF9C6D'\r\n            }],\r\n            global: false\r\n        },\r\n        {\r\n            type: 'linear',\r\n            x: 0,\r\n            y: 0,\r\n            x2: 1,\r\n            y2: 1,\r\n            colorStops: [{\r\n                offset: 0, color: '#71C032' \r\n            }, {\r\n                offset: 1, color: '#51E5A5'\r\n            }],\r\n            global: false\r\n        },\r\n        {\r\n            type: 'linear',\r\n            x: 0,\r\n            y: 0,\r\n            x2: 1,\r\n            y2: 1,\r\n            colorStops: [{\r\n                offset: 0, color: '#FAAA55' \r\n            }, {\r\n                offset: 1, color: '#FCD549'\r\n            }],\r\n            global: false\r\n        },\r\n        {\r\n            type: 'linear',\r\n            x: 0,\r\n            y: 0,\r\n            x2: 1,\r\n            y2: 1,\r\n            colorStops: [{\r\n                offset: 0, color: '#D142D9' \r\n            }, {\r\n                offset: 1, color: '#F82979'\r\n            }],\r\n            global: false\r\n        },\r\n        {\r\n            type: 'linear',\r\n            x: 0,\r\n            y: 0,\r\n            x2: 1,\r\n            y2: 1,\r\n            colorStops: [{\r\n                offset: 0, color: '#26BFA5' \r\n            }, {\r\n                offset: 1, color: '#31B7E8'\r\n            }],\r\n            global: false\r\n        },\r\n        {\r\n            type: 'linear',\r\n            x: 0,\r\n            y: 0,\r\n            x2: 1,\r\n            y2: 1,\r\n            colorStops: [{\r\n                offset: 0, color: '#816AFF' \r\n            }, {\r\n                offset: 1, color: '#BA56E0'\r\n            }],\r\n            global: false\r\n        }\r\n\r\n    ]\r\n}",
        "seriesItem": "",
        "type": "common"
    }
]
